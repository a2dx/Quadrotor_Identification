
ProjektSeminar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000752  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000697  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b0  00000000  00000000  00001055  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000026  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Transmit>:

// send data
void USART_Transmit(unsigned char data){ // unsigned char: 0 - 255
	
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  90:	e0 ec       	ldi	r30, 0xC0	; 192
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	95 ff       	sbrs	r25, 5
  98:	fd cf       	rjmp	.-6      	; 0x94 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  9a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  9e:	08 95       	ret

000000a0 <USART_Receive>:
}

// receive data
unsigned char USART_Receive( void ){
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
  a0:	e0 ec       	ldi	r30, 0xC0	; 192
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 23       	and	r24, r24
  a8:	ec f7       	brge	.-6      	; 0xa4 <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
  aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ae:	08 95       	ret

000000b0 <initPWM>:

// init PWM
void initPWM(){
	// Set Pin 9 (Arduino) to Output. Atmega 328p Pin: (OC1)PB1
	DDRB = (1 << PORTB1);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	84 b9       	out	0x04, r24	; 4
	
	// Set non-inverted mode with COM1A1 and set Waveform Generation Mode with WGM11
	TCCR1A |= 1<<WGM11 | 1<<COM1A1;
  b4:	e0 e8       	ldi	r30, 0x80	; 128
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 68       	ori	r24, 0x82	; 130
  bc:	80 83       	st	Z, r24
	
	// Set Waveform Generation Mode with WGM12 and WGM13 and set prescaler value to 1 with CS10
	TCCR1B |= 1<<WGM12 | 1<<WGM13 | 1<<CS10;
  be:	e1 e8       	ldi	r30, 0x81	; 129
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	89 61       	ori	r24, 0x19	; 25
  c6:	80 83       	st	Z, r24
	
	// Set TOP = maxvalue of Timer1 to 4000
	ICR1 = 3999; // 4000 - 1
  c8:	8f e9       	ldi	r24, 0x9F	; 159
  ca:	9f e0       	ldi	r25, 0x0F	; 15
  cc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  d0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	// Set output compare match value
	OCR1A = 1900; // 1999 = 50 % duty cycle
  d4:	8c e6       	ldi	r24, 0x6C	; 108
  d6:	97 e0       	ldi	r25, 0x07	; 7
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e0:	08 95       	ret

000000e2 <initUSART>:
}

void initUSART( unsigned int ubrr){
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) ubrr;
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0A = (1<<UDRE0)|(1<<U2X0);
  f0:	82 e2       	ldi	r24, 0x22	; 34
  f2:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	
	/* Set frame format: 8data, 1stop bit */
	UCSR0C =  (1 << UCSZ01) | (1 << UCSZ00);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  fc:	08 95       	ret

000000fe <main>:
}

int main(void){
	
	initUSART(MYUBRR);
  fe:	80 e1       	ldi	r24, 0x10	; 16
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 71 00 	call	0xe2	; 0xe2 <initUSART>
	initPWM();
 106:	0e 94 58 00 	call	0xb0	; 0xb0 <initPWM>
	
	while (1){
		
		// check if data is available
		if(UCSR0A & (1<<RXC0)){
 10a:	c0 ec       	ldi	r28, 0xC0	; 192
 10c:	d0 e0       	ldi	r29, 0x00	; 0
			// receive data
			incomming = USART_Receive();
			// send data to confirm receipt
			USART_Transmit(incomming);
			// set PWM
			OCR1A = 1950 + incomming * 8;
 10e:	08 e8       	ldi	r16, 0x88	; 136
 110:	10 e0       	ldi	r17, 0x00	; 0
	initPWM();
	
	while (1){
		
		// check if data is available
		if(UCSR0A & (1<<RXC0)){
 112:	88 81       	ld	r24, Y
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <main+0x14>
			// receive data
			incomming = USART_Receive();
 118:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Receive>
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			// send data to confirm receipt
			USART_Transmit(incomming);
 120:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
			// set PWM
			OCR1A = 1950 + incomming * 8;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	82 56       	subi	r24, 0x62	; 98
 138:	98 4f       	sbci	r25, 0xF8	; 248
 13a:	f8 01       	movw	r30, r16
 13c:	91 83       	std	Z+1, r25	; 0x01
 13e:	80 83       	st	Z, r24
 140:	e8 cf       	rjmp	.-48     	; 0x112 <main+0x14>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
